@function map-deep-get($map, $keys...) {
    @each $key in $keys {
      $map: map-get($map, $key);
    }
  
    @return $map;
  }
  
  @function map-deep-set($map, $keys.../*, $value */) {
    $map-list: ($map,);
    $result: null;
  
    @if length($keys) == 2 {
      @return map-merge($map, (nth($keys, 1): nth($keys, -1)));
    }
  
    @for $i from 1 through length($keys) - 2 {
      $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
    }
  
    @for $i from length($map-list) through 1 {
      $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
    }
  
    @return $result;
  }
  
  @function map-depth($map) {
    $level: 1;
  
    @each $key, $value in $map {
      @if type-of($value) == "map" {
        $level: max(map-depth($value) + 1, $level);
      }
    }
  
    @return $level;
  }
  
  @function map-has-keys($map, $keys...) {
    @each $key in $keys {
      @if not map-has-key($map, $key) {
        @return false;
      }
    }
  
    @return true;
  }
  
  @function map-has-nested-keys($map, $keys...) {
    @each $key in $keys {
      @if not map-has-key($map, $key) {
        @return false;
      }
      $map: map-get($map, $key);
    }
  
    @return true;
  }
  
  @function map-zip($keys, $values) {
    $l-keys: length($keys);
    $l-values: length($values);
    $min: min($l-keys, $l-values);
    $map: ();
  
    @if $l-keys != $l-values {
      @warn "There are #{$l-keys} key(s) for #{$l-values} value(s) in the map for `map-zip`. "
          + "Resulting map will only have #{$min} pairs.";
    }
  
    @if $min == 0 {
      @return $map;
    }
  
    @for $i from 1 through $min {
      $map: map-merge($map, (nth($keys, $i): nth($values, $i)));
    }
  
    @return $map;
  }
  
  @function map-extend($map, $maps.../*, $deep */) {
    $last: nth($maps, -1);
    $deep: $last == true;
    $max: if($deep, length($maps) - 1, length($maps));
  
    // Loop through all maps in $maps...
    @for $i from 1 through $max {
      // Store current map
      $current: nth($maps, $i);
  
      // If not in deep mode, simply merge current map with map
      @if not $deep {
        $map: map-merge($map, $current);
      } @else {
        // If in deep mode, loop through all tuples in current map
        @each $key, $value in $current {
  
          // If value is a nested map and same key from map is a nested map as well
          @if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
            // Recursive extend
            $value: map-extend(map-get($map, $key), $value, true);
          }
  
          // Merge current tuple with map
          $map: map-merge($map, ($key: $value));
        }
      }
    }
  
    @return $map;
  }
  